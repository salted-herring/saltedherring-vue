- pipeline: "saltedherring.designVue"
  trigger_mode: "ON_EVERY_PUSH"
  ref_name: "master"
  ref_type: "BRANCH"
  target_site_url: "http://staging.saltedherring.design/"
  trigger_condition: "ALWAYS"
  actions:
  - action: "Execute: archive site"
    type: "BUILD"
    working_directory: "/buddy/saltedherring.design.vue"
    docker_image_name: "library/node"
    docker_image_tag: "10"
    execute_commands:
    - "if [ ! -d ./archives ]"
    - "then"
    - "\tmkdir ./archives"
    - "fi"
    - "# build nuxt..."
    - "# npm i"
    - "# mv .env-production .env"
    - "# npm run generate"
    - "# mv .env .env-production"
    - "# remove oldest archive if we have more than 6"
    - "count=$(ls -1tr ./archives | wc -l)"
    - "if [ $count \\> 6 ] "
    - "then"
    - "\toldest=$(ls -1tr archives | head -n 1)"
    - "\tif [ -f ./archives/$oldest ]"
    - "\tthen"
    - "\t\trm ./archives/$oldest"
    - "\tfi"
    - "fi"
    - "# archive the site"
    - "tar --exclude=archives --exclude=.git* --exclude=node_modules --exclude=.env* --exclude=editorconfig -zvcf archives/deployment-${execution.id}.tgz ."
    cached_dirs:
    - "/node_modules"
    mount_filesystem_path: "/buddy/saltedherring.design.vue"
    shell: "BASH"
    trigger_condition: "ALWAYS"
  - action: "Rsync to 120.138.18.50"
    type: "RSYNC"
    local_path: "archives/"
    remote_path: "~/container/application/archives"
    login: "saltydesignvue"
    host: "120.138.18.50"
    port: "22"
    env_key: "secure!lC7WtI31Zd39h8CmPk8NbQ=="
    authentication_mode: "ENV_KEY"
    archive: true
    delete_extra_files: true
    compress: true
    deployment_excludes:
    - "/.git/"
    trigger_condition: "ALWAYS"
  - action: "[120.138.18.50] Execute: unarchive latest"
    type: "SSH_COMMAND"
    login: "saltydesignvue"
    host: "120.138.18.50"
    port: "22"
    env_key: "secure!lC7WtI31Zd39h8CmPk8NbQ=="
    authentication_mode: "ENV_KEY"
    commands:
    - "cd ~/container/application"
    - "latest=$(ls -1t archives | head -n 1)"
    - "if [ ! -d release ]"
    - "then"
    - "\tmkdir release"
    - "else"
    - "\trm -rf release"
    - "\tmkdir release"
    - "fi"
    - "tar -xzvf archives/$latest -C ~/container/application/release"
    run_as_script: true
    shell: "BASH"
    trigger_condition: "ALWAYS"
  - action: "[120.138.18.50] Execute: move release"
    type: "SSH_COMMAND"
    login: "saltydesignvue"
    host: "120.138.18.50"
    port: "22"
    env_key: "secure!lC7WtI31Zd39h8CmPk8NbQ=="
    authentication_mode: "ENV_KEY"
    commands:
    - "if [ ! -d ~/container/application/release ]"
    - "then"
    - "\texit 0"
    - "fi"
    - "cd ~/container/application"
    - "mv release releases/${execution.id}"
    - "rm -rf public"
    - "ln -s releases/${execution.id} release"
    run_as_script: true
    shell: "BASH"
    trigger_condition: "ALWAYS"
  - action: "[120.138.18.50] nuxt build"
    type: "SSH_COMMAND"
    login: "saltydesignvue"
    host: "120.138.18.50"
    port: "22"
    env_key: "secure!lC7WtI31Zd39h8CmPk8NbQ=="
    authentication_mode: "ENV_KEY"
    commands:
    - "if [ ! -d ~/container/application/release ]"
    - "then"
    - "\texit 0"
    - "fi"
    - "cd ~/container/application/release"
    - "npm i"
    - "npm run build"
    run_as_script: true
    shell: "BASH"
    trigger_condition: "ALWAYS"
  - action: "Execute: clean up"
    type: "SSH_COMMAND"
    login: "saltydesignvue"
    host: "120.138.18.50"
    port: "22"
    env_key: "secure!lC7WtI31Zd39h8CmPk8NbQ=="
    authentication_mode: "ENV_KEY"
    commands:
    - "cd ~/container/application"
    - "# make relase public"
    - "ln -s releases/${execution.id} public"
    - "if [ -d release ]"
    - "then"
    - "\trm -f release"
    - "fi"
    - "# remove old releases - i.e. more than n releases."
    - "count=$(ls -1tr ~/container/application/releases | wc -l)"
    - "if [ $count \\> 5 ] "
    - "then"
    - "\toldest=$(ls -1tr ~/container/application/releases | head -n 1)"
    - "\tif [ -d ~/container/application/releases/$oldest ]"
    - "\tthen"
    - "\t\trm -rf ~/container/application/releases/$oldest"
    - "\tfi"
    - "fi"
    run_as_script: true
    shell: "BASH"
    trigger_condition: "ALWAYS"
  - action: "Send notification to buddy channel"
    type: "SLACK"
    content: "[#$BUDDY_EXECUTION_ID] $BUDDY_PIPELINE_NAME execution by <$BUDDY_INVOKER_URL|$BUDDY_INVOKER_NAME>"
    channel: "G5M1EEKFX"
    channel_name: "buddy"
    attachments:
    - "{\"fallback\":\"$BUDDY_PIPELINE_NAME execution #$BUDDY_EXECUTION_ID\",\"color\":\"good\",\"fields\":[{\"title\":\"Successful execution\",\"value\":\"<$BUDDY_EXECUTION_URL|Execution #$BUDDY_EXECUTION_ID $BUDDY_EXECUTION_COMMENT>\",\"short\":true},{\"title\":\"Pipeline\",\"value\":\"<$BUDDY_PIPELINE_URL|$BUDDY_PIPELINE_NAME>\",\"short\":true},{\"title\":\"Branch\",\"value\":\"$BUDDY_EXECUTION_BRANCH\",\"short\":true},{\"title\":\"Project\",\"value\":\"<$BUDDY_PROJECT_URL|$BUDDY_PROJECT_NAME>\",\"short\":true}]}"
    trigger_condition: "ALWAYS"
    integration_id: 2
  - action: "Send notification to buddy channel"
    type: "SLACK"
    trigger_time: "ON_FAILURE"
    content: "[#$BUDDY_EXECUTION_ID] $BUDDY_PIPELINE_NAME execution by <$BUDDY_INVOKER_URL|$BUDDY_INVOKER_NAME>"
    channel: "G5M1EEKFX"
    channel_name: "buddy"
    attachments:
    - "{\"fallback\":\"$BUDDY_PIPELINE_NAME execution #$BUDDY_EXECUTION_ID\",\"color\":\"danger\",\"fields\":[{\"title\":\"Failed execution\",\"value\":\"<$BUDDY_EXECUTION_URL|Execution #$BUDDY_EXECUTION_ID $BUDDY_EXECUTION_COMMENT>\",\"short\":true},{\"title\":\"Pipeline\",\"value\":\"<$BUDDY_PIPELINE_URL|$BUDDY_PIPELINE_NAME>\",\"short\":true},{\"title\":\"Branch\",\"value\":\"$BUDDY_EXECUTION_BRANCH\",\"short\":true},{\"title\":\"Project\",\"value\":\"<$BUDDY_PROJECT_URL|$BUDDY_PROJECT_NAME>\",\"short\":true}]}"
    trigger_condition: "ALWAYS"
    integration_id: 2
